<?php

namespace common\models\forms;

use common\models\User;
use Yii;
use yii\helpers\ArrayHelper;

/**
 * Class RegistrationForm
 * @package common\models\forms
 *
 * @property string $new_password
 * @property string $confirm_password
 * @property string $password
 *
 */
class ChangePasswordForm extends User
{
    const SCENARIO_CHANGE_PASSWORD = 'change-password';

    public $current_password;
    public $new_password;
    public $confirm_password;

    public function getBaseName()
    {
        return Yii::t('app', 'Password');
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['current_password', 'new_password', 'confirm_password'], 'required'],
            [['new_password'], 'compare', 'compareAttribute' => 'confirm_password', 'operator' => '==', 'enableClientValidation' => false],
            [['new_password'], 'string', 'min' => Yii::$app->params['user.passwordMinLength']],
            [['new_password'], 'match', 'pattern' => Yii::$app->params['pattern']['letter'],
                'message' => Yii::t('app', 'New Password must contain at least 1 letter.')
            ],
            [['new_password'], 'match', 'pattern' => Yii::$app->params['pattern']['digit'],
                'message' => Yii::t('app', 'New Password must contain at least 1 number.')
            ],
            [['new_password'], 'match', 'pattern' => Yii::$app->params['pattern']['specialChar'],
                'message' => Yii::t('app', 'New Password must contain at least 1 special character.')
            ],
            [['current_password'], 'checkPassword']
        ];
    }

    public function checkPassword($attribute, $params)
    {
        if (!$this->validatePassword($this->{$attribute})) {
            $this->addError(
                $attribute,
                Yii::t('app', "{$this->getAttributeLabel($attribute)} is invalid !")
            );
        }
    }

    public function attributeLabels()
    {
        return [
            'current_password' => Yii::t('app', 'Current Password'),
            'new_password' => Yii::t('app', 'New Password'),
            'confirm_password' => Yii::t('app', 'Confirm Password'),
        ];
    }

    public function scenarios()
    {
        return ArrayHelper::merge(parent::scenarios(), [
            static::SCENARIO_CHANGE_PASSWORD => ['current_password', 'new_password', 'confirm_password']
        ]);
    }

    public function beforeSave($insert)
    {
        $this->setPassword($this->new_password);
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }
}