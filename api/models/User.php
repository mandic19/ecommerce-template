<?php

namespace api\models;

use filsh\yii2\oauth2server\Module;
use OAuth2\Storage\UserCredentialsInterface;
use Yii;
use yii\db\ActiveRecord;

class User extends \common\models\User implements UserCredentialsInterface
{
    /**
     * @inheritdoc
     */
    public static function findIdentityByAccessToken($token, $type = null)
    {
        /** @var Module $module */
        $module = Yii::$app->getModule('oauth2');
        $token = $module->getServer()->getResourceController()->getToken();

        return !empty($token['user_id'])
            ? static::findIdentity($token['user_id'])
            : null;
    }

    /**
     * @param $username
     * @param $password
     * @return bool
     */
    public function checkUserCredentials($username, $password)
    {
        $user = $this->findByUsernameOrEmail($username);
        if (empty($user)) {
            return false;
        }

        return $user->validatePassword($password);
    }

    /**
     * @param string $username
     * @return array
     */
    public function getUserDetails($username)
    {
        $user = $this->findByUsernameOrEmail($username);
        return ['user_id' => $user->getId()];
    }

    /**
     * @inheritdoc
     */
    public static function findIdentityByAccessTokenKey($token)
    {
        /**
         * @var integer $userId
         */
        $userId = (new yii\db\Query())->select('user_id')->from('oauth_access_tokens')->andWhere(['access_token' => $token])->scalar();

        return !empty($userId)
            ? static::findIdentity($userId)
            : null;
    }

    public function fields()
    {
        $fields = parent::fields(); // TODO: Change the autogenerated stub

        unset($fields['password_hash']);
        unset($fields['password_reset_token']);
        unset($fields['verification_token']);
        unset($fields['auth_key']);
        unset($fields['created_at']);
        unset($fields['created_by']);
        unset($fields['updated_at']);
        unset($fields['updated_by']);
        unset($fields['is_deleted']);

        return $fields;
    }

    /**
     * Finds user by username or email
     *
     * @param string $username
     * @return array|ActiveRecord|null
     *
     */
    protected function findByUsernameOrEmail($username)
    {
        return static::find()->where(['status' => self::STATUS_ACTIVE])->andWhere(['OR', ['username' => $username], ['email' => $username]])->one();
    }
}
