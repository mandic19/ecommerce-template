<?php

namespace backend\models\forms;

use common\helpers\BaseHelper;
use common\models\Product;
use common\models\ProductImage;
use Yii;
use yii\helpers\ArrayHelper;

class ProductForm extends Product
{
    public $productImageIds;
    private $imageIds;

    public function getPublicName()
    {
        return Yii::t('app', 'Product');
    }

    public function rules()
    {
        return ArrayHelper::merge(parent::rules(), [
            [['productImageIds'], 'safe']
        ]);
    }

    public function attributeLabels()
    {
        return ArrayHelper::merge(parent::attributeLabels(), [
            'productImageIds' => Yii::t('app', 'Product Images')
        ]);
    }

    public function beforeValidate()
    {
        $coverImageId = null;
        $this->imageIds = BaseHelper::extractIdsFromDropzoneValue($this->productImageIds);

        if(!empty($this->imageIds) && isset($this->imageIds[0])) {
            $coverImageId = $this->imageIds[0];
            unset($this->imageIds[0]);
        }

        $this->cover_image_id = $coverImageId;

        return parent::beforeValidate(); // TODO: Change the autogenerated stub
    }

    public function save($runValidation = true, $attributeNames = null)
    {
        $transaction = Yii::$app->db->beginTransaction();

        if(!parent::save($runValidation, $attributeNames)) {
            $transaction->rollBack();
            return false;
        }

        if(!$this->saveProductImages()) {
            $transaction->rollBack();
            return false;
        }

        $transaction->commit();
        $this->refresh();
        return true;
    }

    /**
     * @return bool
     */
    protected function saveProductImages() {
        $previousImageIds = ArrayHelper::map($this->productImages, 'id', 'image_id');
        $looseImageIds = array_diff($previousImageIds, $this->imageIds);

        if(!empty($looseImageIds) && !$this->deleteLooseImages($looseImageIds)) {
            return false;
        }

        $newImageIds = array_diff($this->imageIds, $previousImageIds);

        if(!empty($this->imageIds) && !$this->createOrUpdateImages($newImageIds)) {
            return false;
        }

        return true;
    }

    /**
     * @param array $imageIds
     * @return int
     */
    protected function deleteLooseImages($imageIds = []) {
        $this->imageIds = array_diff($this->imageIds, $imageIds);

        return ProductImage::deleteAll([
            'AND',
            ['product_id' => $this->id],
            ['IN', 'image_id', $imageIds]
        ]);
    }

    /**
     * @param array $newImageIds
     * @return bool
     */
    protected function createOrUpdateImages($newImageIds = []) {
        $counter = 1;

        foreach ($this->imageIds as $imageId) {
            if(!in_array($imageId, $newImageIds)) {
                $model = $this->findExistingImage($imageId);
                $model->order = $counter;
            } else {
                $model = new ProductImage([
                    'product_id' => $this->id,
                    'image_id' => $imageId,
                    'order' => $counter
                ]);
            }

            if(!$model->save()) {
                $this->addError('product_image', implode('\n\r', $this->getFirstErrors()));
                return false;
            }
            $counter++;
        }

        return true;
    }

    protected function findExistingImage($imageId) {
        foreach ($this->productImages as $productImage) {
            if($productImage->image_id == $imageId) {
                return $productImage;
            }
        }
        return null;
    }
}